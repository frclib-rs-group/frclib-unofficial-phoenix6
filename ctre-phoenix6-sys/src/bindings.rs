/* automatically generated by rust-bindgen 0.69.1 */

pub const PHOENIX_VERSION: u32 = 1572864;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const kPhoenixVersion: ::std::os::raw::c_int = 1572864;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
extern "C" {
    #[doc = " Creates the Phoenix Diagnostic Server on the default port"]
    pub fn c_Phoenix_Diagnostics_Create();
}
extern "C" {
    #[doc = " Creates the Phoenix Diagnostic Server on the given port"]
    pub fn c_Phoenix_Diagnostics_Create_On_Port(port: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Sets the number of seconds after which the Phoenix Diagnostic Server will start"]
    pub fn c_Phoenix_Diagnostics_SetSecondsToStart(secondsToStart: f64);
}
extern "C" {
    #[doc = " Allows the program to terminate early from a remote shutdown command (disabled by default)"]
    pub fn c_Phoenix_Diagnostics_EnableEarlyShutdown();
}
extern "C" {
    #[doc = " Safely disposes of the Phoenix Diagnostic Server"]
    pub fn c_Phoenix_Diagnostics_Dispose();
}
pub const _Context_ContextAPI: _Context = 0;
pub const _Context_ContextDiagServer: _Context = 1;
pub type _Context = ::std::os::raw::c_int;
pub use self::_Context as Context;
extern "C" {
    pub fn c_ctre_phoenix6_get_current_time_seconds() -> f64;
}
extern "C" {
    pub fn c_ctre_phoenix6_is_simulation() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_canbus_sendmessage(
        messageId: u32,
        data: *const u8,
        dataSize: u8,
        canbus: *const ::std::os::raw::c_char,
        printErr: bool,
    );
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_canbus_receivemessage(
        messageId: u32,
        data: *mut u8,
        dataSize: *mut u8,
        canbus: *const ::std::os::raw::c_char,
        printErr: bool,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_set_logger_path(path: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_start_logger() -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_stop_logger() -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_enable_auto_logging(enable: bool) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_raw(
        name: *const ::std::os::raw::c_char,
        data: *const u8,
        size: u8,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_boolean(
        name: *const ::std::os::raw::c_char,
        value: bool,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_integer(
        name: *const ::std::os::raw::c_char,
        value: i64,
        units: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_float(
        name: *const ::std::os::raw::c_char,
        value: f32,
        units: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_double(
        name: *const ::std::os::raw::c_char,
        value: f64,
        units: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_string(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_boolean_array(
        name: *const ::std::os::raw::c_char,
        values: *const bool,
        count: u8,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_integer_array(
        name: *const ::std::os::raw::c_char,
        values: *const i64,
        count: u8,
        units: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_float_array(
        name: *const ::std::os::raw::c_char,
        values: *const f32,
        count: u8,
        units: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_platform_write_double_array(
        name: *const ::std::os::raw::c_char,
        values: *const f64,
        count: u8,
        units: *const ::std::os::raw::c_char,
    ) -> i32;
}
extern "C" {
    pub fn c_ctre_phoenix6_encode_device(
        deviceId: ::std::os::raw::c_int,
        model: *const ::std::os::raw::c_char,
        canbus: *const ::std::os::raw::c_char,
        deviceEncoding: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_set_configs(
        context: ::std::os::raw::c_int,
        network: *const ::std::os::raw::c_char,
        deviceHash: ::std::os::raw::c_int,
        timeoutSeconds: f64,
        values: *const ::std::os::raw::c_char,
        value_len: u32,
        futureProofConfigs: bool,
        overrideIfDuplicate: bool,
        useDid: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_get_configs(
        context: ::std::os::raw::c_int,
        network: *const ::std::os::raw::c_char,
        deviceHash: ::std::os::raw::c_int,
        timeoutSeconds: f64,
        str_: *mut *mut ::std::os::raw::c_char,
        useDid: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_get_configs_no_malloc(
        context: Context,
        network: *const ::std::os::raw::c_char,
        deviceHash: ::std::os::raw::c_int,
        timeoutSeconds: f64,
        str_: *mut ::std::os::raw::c_char,
        str_len: u32,
        useDid: bool,
    ) -> ::std::os::raw::c_int;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_data_public> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    const UNINIT: ::std::mem::MaybeUninit<__crt_locale_pointers> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    const UNINIT: ::std::mem::MaybeUninit<_Mbstatet> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
extern "C" {
    pub fn c_ctre_phoenix6_serialize_double(
        spn: ::std::os::raw::c_int,
        value: f64,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_serialize_double_no_malloc(
        spn: ::std::os::raw::c_int,
        value: f64,
        str_: *mut ::std::os::raw::c_char,
        max_len: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_serialize_int(
        spn: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_serialize_int_no_malloc(
        spn: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
        str_: *mut ::std::os::raw::c_char,
        max_len: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_serialize_bool(
        spn: ::std::os::raw::c_int,
        value: bool,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_serialize_bool_no_malloc(
        spn: ::std::os::raw::c_int,
        value: bool,
        str_: *mut ::std::os::raw::c_char,
        max_len: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_serialize_pgn(
        spn: ::std::os::raw::c_int,
        frame_index: u16,
        framePeriodMs: u16,
        str_: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_serialize_pgn_no_malloc(
        spn: ::std::os::raw::c_int,
        frame_index: u16,
        framePeriodMs: u16,
        str_: *mut ::std::os::raw::c_char,
        max_len: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_deserialize_double(
        spn: ::std::os::raw::c_int,
        str_: *const ::std::os::raw::c_char,
        strlen: u32,
        val: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_deserialize_int(
        spn: ::std::os::raw::c_int,
        str_: *const ::std::os::raw::c_char,
        strlen: u32,
        val: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_deserialize_bool(
        spn: ::std::os::raw::c_int,
        str_: *const ::std::os::raw::c_char,
        strlen: u32,
        val: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_deserialize_pgn(
        spn: ::std::os::raw::c_int,
        str_: *const ::std::os::raw::c_char,
        strlen: u32,
        frame_index: *mut u16,
        framePeriodMs: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_free_memory(str_: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn c_ctre_phoenix6_requestConfigApply(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        timeoutSeconds: f64,
        str_: *const ::std::os::raw::c_char,
        strlen: u32,
        forceApply: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlEmpty(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDutyCycleOut(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Output: f64,
        EnableFOC: bool,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlTorqueCurrentFOC(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Output: f64,
        MaxAbsDutyCycle: f64,
        Deadband: f64,
        OverrideCoastDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlVoltageOut(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Output: f64,
        EnableFOC: bool,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlPositionDutyCycle(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Position: f64,
        Velocity: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlPositionVoltage(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Position: f64,
        Velocity: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlPositionTorqueCurrentFOC(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Position: f64,
        Velocity: f64,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideCoastDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlVelocityDutyCycle(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Velocity: f64,
        Acceleration: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlVelocityVoltage(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Velocity: f64,
        Acceleration: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlVelocityTorqueCurrentFOC(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Velocity: f64,
        Acceleration: f64,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideCoastDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlMotionMagicDutyCycle(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Position: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlMotionMagicVoltage(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Position: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlMotionMagicTorqueCurrentFOC(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Position: f64,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideCoastDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialDutyCycle(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        TargetOutput: f64,
        DifferentialPosition: f64,
        EnableFOC: bool,
        DifferentialSlot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialVoltage(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        TargetOutput: f64,
        DifferentialPosition: f64,
        EnableFOC: bool,
        DifferentialSlot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialPositionDutyCycle(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        TargetPosition: f64,
        DifferentialPosition: f64,
        EnableFOC: bool,
        TargetSlot: ::std::os::raw::c_int,
        DifferentialSlot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialPositionVoltage(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        TargetPosition: f64,
        DifferentialPosition: f64,
        EnableFOC: bool,
        TargetSlot: ::std::os::raw::c_int,
        DifferentialSlot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialVelocityDutyCycle(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        TargetVelocity: f64,
        DifferentialPosition: f64,
        EnableFOC: bool,
        TargetSlot: ::std::os::raw::c_int,
        DifferentialSlot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialVelocityVoltage(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        TargetVelocity: f64,
        DifferentialPosition: f64,
        EnableFOC: bool,
        TargetSlot: ::std::os::raw::c_int,
        DifferentialSlot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialMotionMagicDutyCycle(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        TargetPosition: f64,
        DifferentialPosition: f64,
        EnableFOC: bool,
        TargetSlot: ::std::os::raw::c_int,
        DifferentialSlot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialMotionMagicVoltage(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        TargetPosition: f64,
        DifferentialPosition: f64,
        EnableFOC: bool,
        TargetSlot: ::std::os::raw::c_int,
        DifferentialSlot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlFollower(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        MasterID: ::std::os::raw::c_int,
        OpposeMasterDirection: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlStrictFollower(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        MasterID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialFollower(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        MasterID: ::std::os::raw::c_int,
        OpposeMasterDirection: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDifferentialStrictFollower(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        MasterID: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlNeutralOut(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlCoastOut(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlStaticBrake(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlBalanceBattery(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlBMSManualIsolator(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlBMSManualVboost(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        EnableClosedLoop: bool,
        TargetVoltage: f64,
        TargetDutyCycle: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlBMSManualPwmJunction(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        JunctionSelect: ::std::os::raw::c_int,
        JunctionDutyCycle: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlBMSClearFault(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlMusicTone(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AudioFrequency: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlMotionMagicVelocityDutyCycle(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Velocity: f64,
        Acceleration: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlMotionMagicVelocityTorqueCurrentFOC(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Velocity: f64,
        Acceleration: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideCoastDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlMotionMagicVelocityVoltage(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Velocity: f64,
        Acceleration: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDynamicMotionMagicDutyCycle(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Position: f64,
        Velocity: f64,
        Acceleration: f64,
        Jerk: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDynamicMotionMagicVoltage(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Position: f64,
        Velocity: f64,
        Acceleration: f64,
        Jerk: f64,
        EnableFOC: bool,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideBrakeDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDynamicMotionMagicTorqueCurrentFOC(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        Position: f64,
        Velocity: f64,
        Acceleration: f64,
        Jerk: f64,
        FeedForward: f64,
        Slot: ::std::os::raw::c_int,
        OverrideCoastDurNeutral: bool,
        LimitForwardMotion: bool,
        LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_DutyCycleOut_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Output: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_PositionDutyCycle_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_Velocity: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_VelocityDutyCycle_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Velocity: f64,
        AverageRequest_Acceleration: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_MotionMagicDutyCycle_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_DutyCycleOut_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Output: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_PositionDutyCycle_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_Velocity: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_VelocityDutyCycle_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Velocity: f64,
        AverageRequest_Acceleration: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_MotionMagicDutyCycle_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_VoltageOut_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Output: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_PositionVoltage_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_Velocity: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_VelocityVoltage_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Velocity: f64,
        AverageRequest_Acceleration: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_MotionMagicVoltage_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_VoltageOut_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Output: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_PositionVoltage_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_Velocity: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_VelocityVoltage_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Velocity: f64,
        AverageRequest_Acceleration: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_MotionMagicVoltage_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_EnableFOC: bool,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideBrakeDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_EnableFOC: bool,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideBrakeDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_TorqueCurrentFOC_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Output: f64,
        AverageRequest_MaxAbsDutyCycle: f64,
        AverageRequest_Deadband: f64,
        AverageRequest_OverrideCoastDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideCoastDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_PositionTorqueCurrentFOC_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_Velocity: f64,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideCoastDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideCoastDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_VelocityTorqueCurrentFOC_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Velocity: f64,
        AverageRequest_Acceleration: f64,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideCoastDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideCoastDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_MotionMagicTorqueCurrentFOC_Position(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideCoastDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Position: f64,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideCoastDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_TorqueCurrentFOC_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Output: f64,
        AverageRequest_MaxAbsDutyCycle: f64,
        AverageRequest_Deadband: f64,
        AverageRequest_OverrideCoastDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideCoastDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_PositionTorqueCurrentFOC_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_Velocity: f64,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideCoastDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideCoastDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_VelocityTorqueCurrentFOC_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Velocity: f64,
        AverageRequest_Acceleration: f64,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideCoastDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideCoastDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_RequestControlDiff_MotionMagicTorqueCurrentFOC_Velocity(
        canbus: *const ::std::os::raw::c_char,
        ecuEncoding: u32,
        updateTime: f64,
        cancelOtherRequests: bool,
        AverageRequest_Position: f64,
        AverageRequest_FeedForward: f64,
        AverageRequest_Slot: ::std::os::raw::c_int,
        AverageRequest_OverrideCoastDurNeutral: bool,
        AverageRequest_LimitForwardMotion: bool,
        AverageRequest_LimitReverseMotion: bool,
        DifferentialRequest_Velocity: f64,
        DifferentialRequest_Acceleration: f64,
        DifferentialRequest_FeedForward: f64,
        DifferentialRequest_Slot: ::std::os::raw::c_int,
        DifferentialRequest_OverrideCoastDurNeutral: bool,
        DifferentialRequest_LimitForwardMotion: bool,
        DifferentialRequest_LimitReverseMotion: bool,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _return_values_t {
    pub outValue: f64,
    pub units: *const ::std::os::raw::c_char,
    pub hwtimestampSeconds: f64,
    pub swtimestampSeconds: f64,
    pub ecutimestampSeconds: f64,
    pub error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__return_values_t() {
    const UNINIT: ::std::mem::MaybeUninit<_return_values_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_return_values_t>(),
        48usize,
        concat!("Size of: ", stringify!(_return_values_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_return_values_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_return_values_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outValue) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_return_values_t),
            "::",
            stringify!(outValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).units) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_return_values_t),
            "::",
            stringify!(units)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hwtimestampSeconds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_return_values_t),
            "::",
            stringify!(hwtimestampSeconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swtimestampSeconds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_return_values_t),
            "::",
            stringify!(swtimestampSeconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ecutimestampSeconds) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_return_values_t),
            "::",
            stringify!(ecutimestampSeconds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_return_values_t),
            "::",
            stringify!(error)
        )
    );
}
pub type return_values_t = _return_values_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _signal_values_t {
    pub deviceHash: u32,
    pub spn: u32,
}
#[test]
fn bindgen_test_layout__signal_values_t() {
    const UNINIT: ::std::mem::MaybeUninit<_signal_values_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_signal_values_t>(),
        8usize,
        concat!("Size of: ", stringify!(_signal_values_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_signal_values_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_signal_values_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceHash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal_values_t),
            "::",
            stringify!(deviceHash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_signal_values_t),
            "::",
            stringify!(spn)
        )
    );
}
pub type signal_values_t = _signal_values_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _network_signal_t {
    pub network: *const ::std::os::raw::c_char,
    pub signal: signal_values_t,
}
#[test]
fn bindgen_test_layout__network_signal_t() {
    const UNINIT: ::std::mem::MaybeUninit<_network_signal_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_network_signal_t>(),
        16usize,
        concat!("Size of: ", stringify!(_network_signal_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_network_signal_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_network_signal_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).network) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_network_signal_t),
            "::",
            stringify!(network)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signal) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_network_signal_t),
            "::",
            stringify!(signal)
        )
    );
}
pub type network_signal_t = _network_signal_t;
extern "C" {
    pub fn c_ctre_phoenix_report_error(
        isError: ::std::os::raw::c_int,
        errorCode: i32,
        isLVCode: ::std::os::raw::c_int,
        details: *const ::std::os::raw::c_char,
        location: *const ::std::os::raw::c_char,
        callStack: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn c_ctre_phoenix_get_status_string(
        statusCode: ::std::os::raw::c_int,
        toFill: *mut ::std::os::raw::c_char,
        toFillLength: u32,
    );
}
extern "C" {
    pub fn c_ctre_phoenix6_SetUpdateFrequency(
        context: Context,
        network: *const ::std::os::raw::c_char,
        deviceHash: u32,
        spn: u16,
        frequencyHz: f64,
        timeoutSeconds: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_SetUpdateFrequencyForAll(
        context: Context,
        signals_list: *const network_signal_t,
        num_signals: usize,
        frequencyHz: f64,
        timeoutSeconds: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_GetUpdateFrequency(
        network: *const ::std::os::raw::c_char,
        deviceHash: u32,
        spn: u16,
    ) -> f64;
}
extern "C" {
    pub fn c_ctre_phoenix6_OptimizeUpdateFrequencies(
        context: Context,
        network: *const ::std::os::raw::c_char,
        deviceHash: u32,
        timeoutSeconds: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_ResendUpdateFrequencies(
        context: Context,
        network: *const ::std::os::raw::c_char,
        deviceHash: u32,
        timeoutSeconds: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_get_signal_simplified(
        network: *const ::std::os::raw::c_char,
        bWaitForUpdate: ::std::os::raw::c_int,
        timeoutSeconds: f64,
        num_signals: u32,
        device_hashes: *const u32,
        spns: *const u32,
        values: *mut f64,
        hwTimestampSeconds: *mut f64,
        swTimestampSeconds: *mut f64,
        ecuTimestampSeconds: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn c_ctre_phoenix6_get_signal_unit(
        spn: u16,
        unit_c_string: *mut ::std::os::raw::c_char,
        max_size: u16,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
